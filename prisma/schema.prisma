generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Code {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  code String @unique
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  expiredAt  DateTime
  Type       CodeType @relation(fields: [codeTypeId], references: [id])
  codeTypeId String   @db.ObjectId
}

model CodeType {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  delay     Int //secs
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  Code      Code[]
}

model User {
  id       String    @id @default(auto()) @map("_id") @db.ObjectId
  name     String
  username String    @unique
  password String    @map("password")
  email    String    @unique
  timeline TimeLine?
  role     String    @default("user")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Lecturer {
  id String @id @map("_id") @default(auto()) @db.ObjectId
  name    String
  classes Class[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Class {
  id          String    @id @map("_id")
  weekDay     String
  time        String
  type        String
  room        String
  lecturerId  String
  lecturer    Lecturer  @relation(fields: [lecturerId], references: [id])
  subjectId   String    @db.ObjectId
  subject     Subject   @relation(fields: [subjectId], references: [id])
  yearStudyId String
  yearStudy   YearStudy @relation(fields: [yearStudyId], references: [year])
  semesterId  String
  semester    Semester  @relation(fields: [semesterId], references: [semester])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ClassSecret {
  classId  String            @id @map("_id") @db.ObjectId
  secret   String
  children ClassSecretType[]
}

type ClassSecretType {
  classId String
  secret  String
}

model Major {
  id      String    @id @default(auto()) @map("_id") @db.ObjectId
  name    String    @unique
  subject Subject[]
}

model Subject {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  subjectCode String
  name        String
  majorId     String    @db.ObjectId
  major       Major     @relation(fields: [majorId], references: [id])
  classId     String[]
  class       Class[]
  yearStudyId String
  yearStudy   YearStudy @relation(fields: [yearStudyId], references: [year])
  semesterId  String
  semester    Semester  @relation(fields: [semesterId], references: [semester])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model TimeLine {
  id      String   @default(auto()) @map("_id") @db.ObjectId
  classId String[] @db.ObjectId
  user    User     @relation(fields: [userId], references: [id])
  userId  String   @unique @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@id([id])
}

model YearStudy {
  year    String    @id @map("_id")
  Subject Subject[]
  Week    Week[]
  Class   Class[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Semester {
  semester String    @map("_id")
  Subject  Subject[]
  Week     Week[]
  Class    Class[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@id([semester])
}

model Week {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  weekValue   Int
  weekName    Int
  semesterId  String
  semester    Semester  @relation(fields: [semesterId], references: [semester])
  yearStudyId String
  yearStudy   YearStudy @relation(fields: [yearStudyId], references: [year])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
