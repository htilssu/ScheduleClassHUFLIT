generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Code {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  code      String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  expiredAt DateTime
}

model User {
  id        String     @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  username  String     @unique
  password  String     @map("password")
  email     String     @unique
  role      Role       @default(DEFAULT_USER)
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  TimeLine  TimeLine[]
}

enum Role {
  DEFAULT_USER
  PREMIUM_USER
  ADMIN
}

model Lecturer {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  Classes   Class[]
}

type LearningSection {
  weekDay String
  time    String
  room    String
}

model Class {
  id              String            @id @default(auto()) @map("_id") @db.ObjectId
  classId         String
  type            String
  learningSection LearningSection[]
  subjectId       String
  Subject         Subject           @relation(fields: [subjectId], references: [id])
  yearStudyId     String
  YearStudy       YearStudy         @relation(fields: [yearStudyId], references: [year])
  semesterId      String
  Semester        Semester          @relation(fields: [semesterId], references: [semester])
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  Lecturer        Lecturer          @relation(fields: [lecturerId], references: [id])
  lecturerId      String            @db.ObjectId
}

model ClassSecret {
  id        String            @id @map("_id")
  secret    String
  children  ClassSecretType[]
  createdAt DateTime          @default(now())
  updatedAt DateTime          @updatedAt
}

type ClassSecretType {
  id     String
  secret String
}

model Major {
  id       String    @id @default(auto()) @map("_id") @db.ObjectId
  name     String    @unique
  Subjects Subject[]
}

model Subject {
  id        String   @id @map("_id")
  name      String
  majorId   String   @db.ObjectId
  Major     Major    @relation(fields: [majorId], references: [id])
  Classes   Class[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model YearStudy {
  year      String   @id @map("_id")
  Weeks     Week[]
  Classes   Class[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Semester {
  semester  String   @map("_id")
  Week      Week[]
  Classes   Class[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@id([semester])
}

model Week {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  weekValue   Int
  weekName    Int
  semesterId  String
  Semester    Semester  @relation(fields: [semesterId], references: [semester])
  yearStudyId String
  YearStudy   YearStudy @relation(fields: [yearStudyId], references: [year])
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@unique([weekValue, semesterId, yearStudyId])
}

model TimeLine {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  User      User     @relation(fields: [userId], references: [id])
  userId    String   @db.ObjectId
  data      Json
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
