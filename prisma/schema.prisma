generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Code {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  code       String   @unique
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  expiredAt  DateTime
  Type       CodeType @relation(fields: [codeTypeId], references: [id])
  codeTypeId String   @db.ObjectId
}

model CodeType {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  delay     Int //secs
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  Code      Code[]
}

model User {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  username  String    @unique
  password  String    @map("password")
  email     String    @unique
  timeline  TimeLine?
  role      String    @default("USER")
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Lecturer {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  Classes   Class[]
}

model Class {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  classId     String
  weekDay     String
  time        String
  type        String
  room        String
  subjectId   String
  Subject     Subject   @relation(fields: [subjectId], references: [id])
  yearStudyId String
  YearStudy   YearStudy @relation(fields: [yearStudyId], references: [year])
  semesterId  String
  Semester    Semester  @relation(fields: [semesterId], references: [semester])
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  Lecturer    Lecturer  @relation(fields: [lecturerId], references: [id])
  lecturerId  String    @db.ObjectId
}

model ClassSecret {
  id   String            @id @map("_id")
  secret    String
  children  ClassSecretType[]
  createdAt DateTime          @default(now())
  updatedAt DateTime          @updatedAt
}

type ClassSecretType {
  id   String
  secret    String
}

model Major {
  id       String    @id @default(auto()) @map("_id") @db.ObjectId
  name     String    @unique
  Subjects Subject[]
}

model Subject {
  id          String    @id @map("_id")
  name        String
  majorId     String    @db.ObjectId
  Major       Major     @relation(fields: [majorId], references: [id])
  classId     String[]
  Classes     Class[]
  yearStudyId String
  YearStudy   YearStudy @relation(fields: [yearStudyId], references: [year])
  semesterId  String
  Semester    Semester  @relation(fields: [semesterId], references: [semester])
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model TimeLine {
  id        String   @default(auto()) @map("_id") @db.ObjectId
  classId   String[] @db.ObjectId
  User      User     @relation(fields: [userId], references: [id])
  userId    String   @unique @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@id([id])
}

model YearStudy {
  year      String    @id @map("_id")
  Subjects  Subject[]
  Weeks     Week[]
  Classes   Class[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Semester {
  semester  String    @map("_id")
  Subject   Subject[]
  Week      Week[]
  Classes   Class[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  @@id([semester])
}

model Week {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  weekValue   Int
  weekName    Int
  semesterId  String
  Semester    Semester  @relation(fields: [semesterId], references: [semester])
  yearStudyId String
  YearStudy   YearStudy @relation(fields: [yearStudyId], references: [year])
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}
